let
    Source = (#"Days Ago To Start" as number, #"Days Ago To Finish" as number, #"Hours" as number,#"Pagination Hours" as number,  #"Log Analytics Table" as text, #"UTC Offset Hours" as number) => let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/" & GetWorkspaceId & "/query", 
[Query=[#"query"="
set notruncation;


let startDate = startofday(ago(" & Number.ToText(#"Days Ago To Start") & "d))- "& Number.ToText(#"UTC Offset Hours" * 60) & "m ;
let startIngestionTime = datetime_add('hour', " & Number.ToText(#"Hours") & ",todatetime(startDate));
let endIngestionTime = datetime_add('hour', " & Number.ToText(#"Pagination Hours") & ",todatetime(startIngestionTime));

"& #"Log Analytics Table" & " 
| where TimeGenerated >= startIngestionTime and TimeGenerated < endIngestionTime
| where (OperationName == 'ProgressReportEnd') // Refreshes
| extend TextDataHash = hash(EventText)
| extend DurationMs = coalesce(DurationMs, 0)
| extend Microsecond = datetime_part(""microsecond"",TimeGenerated)
| distinct ApplicationName, CpuTimeMs, ArtifactId, ArtifactName, ArtifactKind, DatasetMode, DurationMs, EventText, ExecutingUser, OperationDetailName, OperationName, PremiumCapacityId, SourceSystem, Status, StatusCode, TenantId, TextDataHash, TimeGenerated, Microsecond, Type, User, PowerBIWorkspaceId, PowerBIWorkspaceName, XmlaRequestId, XmlaSessionId, XmlaObjectPath, _ResourceId, _SubscriptionId
| project ApplicationName, CpuTimeMs, DatasetId = ArtifactId, Dataset = ArtifactName, ArtifactKind, DatasetMode, ['Duration (ms)'] = DurationMs, EventText, ExecutingUser, OperationDetailName, OperationName, PremiumCapacityId, SourceSystem, Status, StatusCode, TenantId, TextDataHash, TimeGenerated, Microsecond, Type, User, PowerBIWorkspaceId, PowerBIWorkspaceName, XmlaRequestId, XmlaSessionId, XmlaObjectPath, ResourceId = _ResourceId, SubscriptionId = _SubscriptionId, StartTime = TimeGenerated

"],Timeout=#duration(0,0,60,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table

in
    AnalyticsQuery
in
    Source