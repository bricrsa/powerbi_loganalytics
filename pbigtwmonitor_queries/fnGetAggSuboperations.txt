let
    Source = (#"Days Ago To Start" as number, #"Days Ago To Finish" as number, #"Hours" as number,#"Pagination Hours" as number, #"Log Analytics Table" as text, #"UTC Offset Hours" as number) => let AnalyticsQuery =
let Source = Json.Document(Web.Contents("https://api.loganalytics.io/v1/workspaces/" & GetWorkspaceId & "/query", 
[Query=[#"query"="
set notruncation;
let workspaceIdList = dynamic(['50EA7149-43DC-4DE3-8E56-4D5DBBC83E8F', 'C839BDCB-81B5-4DC3-9F92-818FE71432A1', '80FA5101-D77B-4AC3-B86A-EEAFE28E64AC']);

let startDate = startofday(ago(" & Number.ToText(#"Days Ago To Start") & "d))- "& Number.ToText(#"UTC Offset Hours" * 60) & "m ;
let endDate = endofday(ago(" & Number.ToText(#"Days Ago To Finish") & "d));
let startIngestionTime = datetime_add('hour', " & Number.ToText(#"Hours") & ",todatetime(startDate));
let endIngestionTime = datetime_add('hour', " & Number.ToText(#"Pagination Hours") & ",todatetime(startIngestionTime));

"& #"Log Analytics Table" &  " 
| where TimeGenerated >= startIngestionTime and TimeGenerated < endIngestionTime
| where (OperationName == 'AggregateTableRewriteQuery') 
| extend TextDataHash = hash(EventText)
| extend DurationMs = coalesce(DurationMs, 0)
| extend User = iff(toupper(PowerBIWorkspaceId) in (workspaceIdList), hash_md5(User), User)
| extend ExecutingUser = iff(toupper(PowerBIWorkspaceId) in (workspaceIdList), hash_md5(ExecutingUser), ExecutingUser)
| distinct ApplicationName, CpuTimeMs, ArtifactId, ArtifactName, ArtifactKind, DatasetMode, DurationMs, EventText, ExecutingUser, OperationDetailName, OperationName, PremiumCapacityId, SourceSystem, Status, StatusCode, TenantId, TextDataHash, TimeGenerated, Type, User, PowerBIWorkspaceId, PowerBIWorkspaceName, XmlaRequestId, XmlaSessionId, XmlaObjectPath, _ResourceId, _SubscriptionId
| project ApplicationName, CpuTimeMs, DatasetId = ArtifactId, Dataset = ArtifactName, ArtifactKind, DatasetMode, ['Duration (ms)'] = DurationMs, EventText, ExecutingUser, OperationDetailName, OperationName, PremiumCapacityId, SourceSystem, Status, StatusCode, TenantId, TextDataHash, TimeGenerated, Type, User, PowerBIWorkspaceId, PowerBIWorkspaceName, XmlaRequestId, XmlaSessionId, XmlaObjectPath, ResourceId = _ResourceId, SubscriptionId = _SubscriptionId, StartTime = TimeGenerated

"],Timeout=#duration(0,0,60,0)])),
TypeMap = #table(
{ "AnalyticsTypes", "Type" }, 
{ 
{ "string",   Text.Type },
{ "int",      Int32.Type },
{ "long",     Int64.Type },
{ "real",     Double.Type },
{ "timespan", Duration.Type },
{ "datetime", DateTimeZone.Type },
{ "bool",     Logical.Type },
{ "guid",     Text.Type },
{ "dynamic",  Text.Type }
}),
DataTable = Source[tables]{0},
Columns = Table.FromRecords(DataTable[columns]),
ColumnsWithType = Table.Join(Columns, {"type"}, TypeMap , {"AnalyticsTypes"}),
Rows = Table.FromRows(DataTable[rows], Columns[name]), 
Table = Table.TransformColumnTypes(Rows, Table.ToList(ColumnsWithType, (c) => { c{0}, c{3}}))
in
Table,
    #"Added Start DateTime (UTC offset)" = Table.AddColumn(#"AnalyticsQuery", "Start DateTime", each [TimeGenerated] + #duration(0,Number.RoundDown(#"UTC Offset Hours"),Number.RoundDown(60 * Number.Mod(#"UTC Offset Hours", 1)),0),type datetime),   
    #"Inserted StartDate" = Table.AddColumn(#"Added Start DateTime (UTC offset)", "Start Date", each DateTime.Date([Start DateTime]), type date),
    #"Start Time (s)" = Table.AddColumn(#"Inserted StartDate", "Start Time (s)", each DateTime.Time([Start DateTime]), type time),
    // #"Inserted StartDate" = Table.AddColumn(#"Added Start DateTime (UTC offset)", "Start Date", each Text.BeforeDelimiter(Text.From([Start DateTime], "en-us"), " ") as text),
    //#"Start Time (s)" = Table.AddColumn(#"Inserted StartDate", "Start Time (s)", each Text.BetweenDelimiters(Text.From([Start DateTime], "en-US"), " ", " ", 0, 1), type time),
        
    //#"Renamed Columns" = Table.RenameColumns(#"Start Time (s)",{{"DurationMs", "Duration (ms)"}}),
    #"Added End Date/Time" = Table.AddColumn(#"Start Time (s)", "EndTime", each [Start DateTime] + #duration(0, 0, 0, [#"Duration (ms)"] / 1000)),
    #"Changed Type" = Table.TransformColumnTypes(#"Added End Date/Time",{{"Start Date", type date}, {"Start DateTime", type datetimezone}, {"EndTime", type datetimezone}}),
    #"Removed StartTime, TimeGenerated" = Table.RemoveColumns(#"Changed Type",{"TimeGenerated", "StartTime"})
in
    #"Removed StartTime, TimeGenerated"
in
    Source